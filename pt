#!/usr/bin/env ruby
# frozen_string_literal: true

# dependencies
require "commander/import"

# standard lib
require "net/http"
require "net/https"

# modules
require "utils"
require "actions/deploy"
require "actions/gobierto_data_import"

program :name, "Populate Tools"
program :version, "1.0.0"
program :description, "Populate Tools idem"

command :release do |c|
  c.syntax = "pt release <branch-name>"
  c.description = "Releases a branch to staging"
  c.action do |args, _options|
    branch = args.first || Utils.git_branch
    current_status = `git status -z`
    if current_status.empty?
      `git checkout #{branch}`
      `git pull origin #{branch}`
      `git checkout staging`
      `git pull origin staging`
      `git merge #{branch} --no-edit`
      `git push origin staging`
      application_name = File.basename(Dir.pwd)
      Actions::Deploy.run(application_name, "staging")
    else
      say "There are changes in the current branch. Release aborted"
    end
  end
end

command :deploy do |c|
  c.syntax = "pt deploy <project> <environment>"
  c.description = "Calls deploy bot. Requires to setup the environment variable DEPLOY_BOT_TOKEN"
  c.action do |args, _options|
    application_name = args.first
    environment = args.last
    Actions::Deploy.run(application_name, environment)
  end
end

command :log do |c|
  c.syntax = "pt log <server> <project>"
  c.description = "Tails a remote log"
  c.action do |args, _options|
    server = args[0]
    project = args[1]

    if server == "staging01"
      project = "#{project}_staging"
      log_file_name = "staging.log"
    else
      log_file_name = "production.log"
    end

    system("/usr/bin/ssh #{server} 'tail -f /var/www/#{project}/shared/log/#{log_file_name}'")
  end
end

command :pr do |c|
  c.syntax = "pt pr"
  c.description = "Creates a new PR for the current branch"
  c.action do |_args, _options|
    system %( open "https://github.com/#{Utils.git_organization}/#{Utils.git_project}/pull/new/#{Utils.git_branch}" )
  end
end

command :gh do |c|
  c.syntax = "pt gh [issues | prs | wiki]"
  c.description = "Opens the github page of the current project"
  c.action do |args, _options|
    option = args[0]
    suffix = case option
             when "prs"
               "pulls"
             else
               option
             end
    system %( open "https://github.com/#{Utils.git_organization}/#{Utils.git_project}/#{suffix}" )
  end
end

command :gobierto_data_import do |c|
  c.syntax = "pt gobierto_data_import <gobierto_host> <dataset_name> <table_name> <data_file> [schema_file (optional)]"
  c.description = "Imports a dataset in gobierto data. Requires to setup the environment variable GOBIERT_DATA_ADMIN_TOKEN"
  c.action do |args, _options|
    Actions::GobiertoDataImport.run(args)
  end
end

command :circle do |c|
  c.syntax = "pt circle"
  c.description = "Opens current project branch in CircleCI"
  c.action do |_args, _options|
    system %( open "https://app.circleci.com/pipelines/github/#{Utils.git_organization}/#{Utils.git_project}?branch=#{Utils.git_branch}" )
  end
end
